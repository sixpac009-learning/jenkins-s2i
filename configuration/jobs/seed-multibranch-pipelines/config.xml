<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Groovy script used to seed Jenkins with multi-branch pipeline jobs:&#xd;
1. Call GitLab API to get each git repo in a given project&#xd;
2. Check if project is archived, if so skip it.&#xd;
3. Check if there is a Jenkinsfile (on master) in each of the found projects&#xd;
4. Generate a pipeline using the Jenkinsfile and add it to the queue on first creation&#xd;
5. Every 10 mins run again</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.5"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.0.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.20">
      <gitLabConnection></gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.32">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>master</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H/30 * * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.77">
      <scriptText>// Groovy script used to seed Jenkins with multi-branch pipeline jobs:
// 1. Call GitLab API to get each git project in a given group
// 2. Check if project is archived, if so skip it.
// 3. Check if there is a Jenkinsfile (on master) in each of the found projects
// 4. Generate a pipeline using the Jenkinsfile and add it to the queue on first creation
// 5. Every 10 mins run again


// GITLAB
def gitlabHost = System.getenv(&quot;GITLAB_HOST&quot;)
gitlabHost = gitlabHost.contains(&quot;https&quot;) ? gitlabHost : &quot;https://${gitlabHost}&quot;
def gitlabToken = System.getenv(&quot;GITLAB_TOKEN&quot;)
def groupName = System.getenv(&quot;GITLAB_GROUP_NAME&quot;) ?: &quot;rht-labs&quot;
def gitlabProjectsApi = new URL(&quot;${gitlabHost}/api/v4/groups/${groupName}/projects?per_page=100&quot;)
def defaultBranch = System.getenv(&quot;GITLAB_DEFAULT_BRANCH&quot;) ?: &quot;master&quot;

// GITHUB
def githubHost = &quot;https://api.github.com&quot;
// Token needed for rate limiting issues....
def githubToken = System.getenv(&quot;GITHUB_TOKEN&quot;)
def githubAccount = System.getenv(&quot;GITHUB_ACCOUNT&quot;)
def githubOrg = System.getenv(&quot;GITHUB_ORG&quot;) ?: false
//eg  https://api.github.com/users/springdo/repos or 

def githubProjects = githubOrg ? new URL(&quot;${githubHost}/orgs/${githubAccount}/repos?per_page=100&quot;) : new URL(&quot;${githubHost}/users/${githubAccount}/repos?per_page=100&quot;)


def createMultibranchPipelineJob(project, gitPath, jte) {
    def buildNamespace = System.getenv(&quot;BUILD_NAMESPACE&quot;) ?: &quot;labs-ci-cd&quot;
    def buildGitAuthSecret = System.getenv(&quot;BUILD_GIT_AUTH_SECRET&quot;) ?: &quot;git-auth&quot;
    def jteProject = System.getenv(&quot;JTE_PROJECT&quot;) ?: &quot;https://gitlab.apps.proj.example.com/rht-labs/pipeline-template-configuration.git&quot;
    def pipelineConfigDir = System.getenv(&quot;JTE_PIPELINE_DIR&quot;) ?: &quot;pipeline-configuration&quot;
    def librariesDir = System.getenv(&quot;JTE_LIBRARIES_DIR&quot;) ?: &quot;libraries&quot;

    // Build Jenkins multibranch jobs
    multibranchPipelineJob(project) {
        branchSources {
            git {
                id(&quot;${project}&quot;)
                remote(gitPath)
                credentialsId(&quot;${buildNamespace}-${buildGitAuthSecret}&quot;)
            }
        }
        triggers {
            computedFolderWebHookTrigger {
              // The token to match with webhook token.
              token(project)
            }
        }
        orphanedItemStrategy {
            discardOldItems {
              // Set to 0 to autoprune jobs once branch is deleted 
              numToKeep(0)
            }
        }

        // jte == boolean
        if (jte) {
          println(&quot;appending config for JTE to job&quot;);
          factory {
              templateBranchProjectFactory {
                  filterBranches(true)
              }
          }
          properties {
            templateConfigFolderProperty {
              tier {
                configurationProvider {
                  scmPipelineConfigurationProvider {
                    baseDir(&quot;${pipelineConfigDir}&quot;)
                    scm {
                      gitSCM {
                        userRemoteConfigs {
                          userRemoteConfig {
                            url(&quot;${jteProject}&quot;)
                            refspec(&quot;master&quot;)
                            name(&quot;jte-config&quot;)
                            credentialsId(&quot;${buildNamespace}-${buildGitAuthSecret}&quot;)
                            }
                        }
                        doGenerateSubmoduleConfigurations(false)
                        browser {}
                        gitTool(null)
                        }
                      }
                    }
                  }
                  librarySources {
                    librarySource {
                      libraryProvider {
                        scmLibraryProvider {
                          baseDir(&quot;${librariesDir}&quot;)
                          scm {
                            gitSCM {
                              userRemoteConfigs {
                                userRemoteConfig {
                                    url(&quot;${jteProject}&quot;)
                                    name(&quot;library-config&quot;)
                                    refspec(&quot;master&quot;)
                                    credentialsId(&quot;${buildNamespace}-${buildGitAuthSecret}&quot;)
                                }
                              }
                              doGenerateSubmoduleConfigurations(false)
                              browser {}
                              gitTool(null)
                            }
                          }
                        }
                      }
                    }
                  }
              }
            }
          }
        }
    }
}


def addJobToQueue(project){
  if (!jenkins.model.Jenkins.instance.getItemByFullName(project)) {
    print &quot;About to create ${project} for the first time, this will result in a triggering the build after this run to prepare the ${project} pipeline\n\n&quot;
    queue(project)
  }
}
// if GITLAB* set ....
if (gitlabHost) {
  try {
      // def projects = new groovy.json.JsonSlurper().parse(gitlabProjectsApi.newReader(requestProperties: [&apos;PRIVATE-TOKEN&apos;: gitlabToken]))
      def projects = gitlabToken ? new groovy.json.JsonSlurper().parse(gitlabProjectsApi.newReader(requestProperties: [&apos;PRIVATE-TOKEN&apos;: gitlabToken])) : new groovy.json.JsonSlurper().parse(gitlabProjectsApi.newReader())

      projects.each {
          def project = &quot;${it.path}&quot;
          def gitPath = it.http_url_to_repo

          if (it.archived) {
              println &quot;skipping project ${project} because it has been archived\n\n&quot;
              return
          }

          // 1. Check for &quot;${gitlabHost}/api/v4/projects/${it.id}/repository/files/pipeline_config.groovy?ref=master&quot;
                // =&gt; JTE
          // 2. Check for Jenkinsfile
                // =&gt; Jenkins classic
          // else - bail and do nothing
          try {
              def filesApi = new URL(&quot;${gitlabHost}/api/v4/projects/${it.id}/repository/files/pipeline_config.groovy?ref=${defaultBranch}&quot;)
              def files =  gitlabToken ? new groovy.json.JsonSlurper().parse(filesApi.newReader(requestProperties: [&apos;PRIVATE-TOKEN&apos;: gitlabToken])) : new groovy.json.JsonSlurper().parse(filesApi.newReader())
              println &quot;😘 JTE pipeline_config.groovy found in ${project} 🥳&quot;
              createMultibranchPipelineJob(project, gitPath, true)
              addJobToQueue(project)
              return;

          }
          catch(Exception e) {
              println e
              println &quot;JTE pipeline_config.groovy not found in ${project}. Checking for Jenkinsfile \n\n&quot;
          }
          try {
              def filesApi = new URL(&quot;${gitlabHost}/api/v4/projects/${it.id}/repository/files/Jenkinsfile?ref=${defaultBranch}&quot;)
              def files =  gitlabToken ? new groovy.json.JsonSlurper().parse(filesApi.newReader(requestProperties: [&apos;PRIVATE-TOKEN&apos;: gitlabToken])) :  new groovy.json.JsonSlurper().parse(filesApi.newReader())
              println &quot;😘 Jenkinsfile found in ${project} 🥳&quot;
              createMultibranchPipelineJob(project, gitPath, false)
              addJobToQueue(project)
          }
          catch(Exception e) {
              println e
              println &quot;skipping project ${project} because it has no Jenkinsfile\n\n&quot;
          }
      }
  } catch(Exception e) {
      print &quot;\n\n Please make sure you have set  GITLAB_HOST, GITLAB_TOKEN and GITLAB_GROUP_NAME in your deploy config for Jenkins \n\n\n&quot;
      throw e
  }
} else if (githubAccount) {
  try {
      def projects = githubToken ? new groovy.json.JsonSlurper().parse(githubProjects.newReader(requestProperties: [&apos;Authorization&apos;: &quot;token ${githubToken}&quot;])) : new groovy.json.JsonSlurper().parse(githubProjects.newReader())

      projects.each {
          def project = it.name
          def gitPath = it.clone_url

          if (it.archived) {
              print &quot;skipping project ${project} because it has been archived\n\n&quot;
              return
          }

          try {
            // https://api.github.com/repos/$ORG or $USER/name/contents/Jenkinsfile
              def filesApi = new URL(&quot;${githubHost}/repos/${githubAccount}/${project}/contents/pipeline_config.groovy&quot;)
              def files =  githubToken ? new groovy.json.JsonSlurper().parse(filesApi.newReader(requestProperties: [&apos;Authorization&apos;: &quot;token ${githubToken}&quot;])) : new groovy.json.JsonSlurper().parse(filesApi.newReader())

              println &quot;😘 JTE pipeline_config.groovy found in ${project} 🥳&quot;
              createMultibranchPipelineJob(project, gitPath, true)
              addJobToQueue(project)
              return;

          }
          catch(Exception e) {
              println e
              println &quot;JTE pipeline_config.groovy not found in ${project}. Checking for Jenkinsfile \n\n&quot;
          }
          try {
              def filesApi = new URL(&quot;${githubHost}/repos/${githubAccount}/${project}/contents/Jenkinsfile&quot;)
              def files =  githubToken ? new groovy.json.JsonSlurper().parse(filesApi.newReader(requestProperties: [&apos;Authorization&apos;: &quot;token ${githubToken}&quot;])) : new groovy.json.JsonSlurper().parse(filesApi.newReader())
              println &quot;😘 Jenkinsfile found in ${project} 🥳&quot;
              createMultibranchPipelineJob(project, gitPath, false)
              addJobToQueue(project)
          }
          catch(Exception e) {
              println e
              println &quot;skipping project ${project} because it has no Jenkinsfile\n\n&quot;
          }
      }
  } catch(Exception e) {
      print &quot;\n\n Oops! something went wrong..... Try setting the GITHUB_* Env Vars \n\n\n&quot;
      throw e
  }
} else {
    print &quot;\n\n No tokens set in the Environment eg GITHUB* or GITLAB* so not sure what to do ..... 路‍♂️ \n\n\n&quot;
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>true</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <failOnSeedCollision>false</failOnSeedCollision>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>DELETE</removedJobAction>
      <removedViewAction>DELETE</removedViewAction>
      <removedConfigFilesAction>DELETE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@1.0.0">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>
